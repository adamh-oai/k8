# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1.29.7
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from .io_external_secrets_generators_v1alpha1_vault_dynamic_secret_spec_provider_auth_iam_jwt import IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderAuthIamJwt
from .io_external_secrets_generators_v1alpha1_vault_dynamic_secret_spec_provider_auth_iam_secret_ref import IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderAuthIamSecretRef
from typing import Optional, Set
from typing_extensions import Self

class IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderAuthIam(BaseModel):
    """
    Iam authenticates with vault by passing a special AWS request signed with AWS IAM credentials AWS IAM authentication method
    """ # noqa: E501
    external_id: Optional[StrictStr] = Field(default=None, description="AWS External ID set on assumed IAM roles", alias="externalID")
    jwt: Optional[IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderAuthIamJwt] = None
    path: Optional[StrictStr] = Field(default=None, description="Path where the AWS auth method is enabled in Vault, e.g: \"aws\"")
    region: Optional[StrictStr] = Field(default=None, description="AWS region")
    role: Optional[StrictStr] = Field(default=None, description="This is the AWS role to be assumed before talking to vault")
    secret_ref: Optional[IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderAuthIamSecretRef] = Field(default=None, alias="secretRef")
    vault_aws_iam_server_id: Optional[StrictStr] = Field(default=None, description="X-Vault-AWS-IAM-Server-ID is an additional header used by Vault IAM auth method to mitigate against different types of replay attacks. More details here: https://developer.hashicorp.com/vault/docs/auth/aws", alias="vaultAwsIamServerID")
    vault_role: StrictStr = Field(description="Vault Role. In vault, a role describes an identity with a set of permissions, groups, or policies you want to attach a user of the secrets engine", alias="vaultRole")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["externalID", "jwt", "path", "region", "role", "secretRef", "vaultAwsIamServerID", "vaultRole"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderAuthIam from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of jwt
        if self.jwt:
            _dict['jwt'] = self.jwt.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secret_ref
        if self.secret_ref:
            _dict['secretRef'] = self.secret_ref.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderAuthIam from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "externalID": obj.get("externalID"),
            "jwt": IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderAuthIamJwt.from_dict(obj["jwt"]) if obj.get("jwt") is not None else None,
            "path": obj.get("path"),
            "region": obj.get("region"),
            "role": obj.get("role"),
            "secretRef": IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderAuthIamSecretRef.from_dict(obj["secretRef"]) if obj.get("secretRef") is not None else None,
            "vaultAwsIamServerID": obj.get("vaultAwsIamServerID"),
            "vaultRole": obj.get("vaultRole")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


