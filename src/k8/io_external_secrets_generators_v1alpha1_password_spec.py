# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1.29.7
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IoExternalSecretsGeneratorsV1alpha1PasswordSpec(BaseModel):
    """
    PasswordSpec controls the behavior of the password generator.
    """ # noqa: E501
    allow_repeat: StrictBool = Field(description="set AllowRepeat to true to allow repeating characters.", alias="allowRepeat")
    digits: Optional[StrictInt] = Field(default=None, description="Digits specifies the number of digits in the generated password. If omitted it defaults to 25% of the length of the password")
    length: StrictInt = Field(description="Length of the password to be generated. Defaults to 24")
    no_upper: StrictBool = Field(description="Set NoUpper to disable uppercase characters", alias="noUpper")
    symbol_characters: Optional[StrictStr] = Field(default=None, description="SymbolCharacters specifies the special characters that should be used in the generated password.", alias="symbolCharacters")
    symbols: Optional[StrictInt] = Field(default=None, description="Symbols specifies the number of symbol characters in the generated password. If omitted it defaults to 25% of the length of the password")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["allowRepeat", "digits", "length", "noUpper", "symbolCharacters", "symbols"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoExternalSecretsGeneratorsV1alpha1PasswordSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoExternalSecretsGeneratorsV1alpha1PasswordSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowRepeat": obj.get("allowRepeat"),
            "digits": obj.get("digits"),
            "length": obj.get("length"),
            "noUpper": obj.get("noUpper"),
            "symbolCharacters": obj.get("symbolCharacters"),
            "symbols": obj.get("symbols")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


