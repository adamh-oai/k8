# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1.29.7
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from .io_external_secrets_generators_v1alpha1_vault_dynamic_secret_spec_provider_auth import IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderAuth
from .io_external_secrets_generators_v1alpha1_vault_dynamic_secret_spec_provider_ca_provider import IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderCaProvider
from .io_external_secrets_generators_v1alpha1_vault_dynamic_secret_spec_provider_tls import IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderTls
from typing import Optional, Set
from typing_extensions import Self

class IoExternalSecretsV1beta1SecretStoreSpecProviderVault(BaseModel):
    """
    Vault configures this store to sync secrets using Hashi provider
    """ # noqa: E501
    auth: IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderAuth
    ca_bundle: Optional[Union[Annotated[bytes, Field(strict=True)], Annotated[str, Field(strict=True)]]] = Field(default=None, description="PEM encoded CA bundle used to validate Vault server certificate. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. If not set the system root certificates are used to validate the TLS connection.", alias="caBundle")
    ca_provider: Optional[IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderCaProvider] = Field(default=None, alias="caProvider")
    forward_inconsistent: Optional[StrictBool] = Field(default=None, description="ForwardInconsistent tells Vault to forward read-after-write requests to the Vault leader instead of simply retrying within a loop. This can increase performance if the option is enabled serverside. https://www.vaultproject.io/docs/configuration/replication#allow_forwarding_via_header", alias="forwardInconsistent")
    namespace: Optional[StrictStr] = Field(default=None, description="Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: \"ns1\". More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces")
    path: Optional[StrictStr] = Field(default=None, description="Path is the mount path of the Vault KV backend endpoint, e.g: \"secret\". The v2 KV secret engine version specific \"/data\" path suffix for fetching secrets from Vault is optional and will be appended if not present in specified path.")
    read_your_writes: Optional[StrictBool] = Field(default=None, description="ReadYourWrites ensures isolated read-after-write semantics by providing discovered cluster replication states in each request. More information about eventual consistency in Vault can be found here https://www.vaultproject.io/docs/enterprise/consistency", alias="readYourWrites")
    server: StrictStr = Field(description="Server is the connection address for the Vault server, e.g: \"https://vault.example.com:8200\".")
    tls: Optional[IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderTls] = None
    version: Optional[StrictStr] = Field(default=None, description="Version is the Vault KV secret engine version. This can be either \"v1\" or \"v2\". Version defaults to \"v2\".")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["auth", "caBundle", "caProvider", "forwardInconsistent", "namespace", "path", "readYourWrites", "server", "tls", "version"]

    @field_validator('ca_bundle')
    def ca_bundle_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$", value):
            raise ValueError(r"must validate the regular expression /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/")
        return value

    @field_validator('version')
    def version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['v1', 'v2']):
            raise ValueError("must be one of enum values ('v1', 'v2')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoExternalSecretsV1beta1SecretStoreSpecProviderVault from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of auth
        if self.auth:
            _dict['auth'] = self.auth.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ca_provider
        if self.ca_provider:
            _dict['caProvider'] = self.ca_provider.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tls
        if self.tls:
            _dict['tls'] = self.tls.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoExternalSecretsV1beta1SecretStoreSpecProviderVault from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auth": IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderAuth.from_dict(obj["auth"]) if obj.get("auth") is not None else None,
            "caBundle": obj.get("caBundle"),
            "caProvider": IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderCaProvider.from_dict(obj["caProvider"]) if obj.get("caProvider") is not None else None,
            "forwardInconsistent": obj.get("forwardInconsistent"),
            "namespace": obj.get("namespace"),
            "path": obj.get("path"),
            "readYourWrites": obj.get("readYourWrites"),
            "server": obj.get("server"),
            "tls": IoExternalSecretsGeneratorsV1alpha1VaultDynamicSecretSpecProviderTls.from_dict(obj["tls"]) if obj.get("tls") is not None else None,
            "version": obj.get("version")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


