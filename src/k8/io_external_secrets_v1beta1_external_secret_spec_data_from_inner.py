# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1.29.7
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from .io_external_secrets_v1beta1_external_secret_spec_data_from_inner_extract import IoExternalSecretsV1beta1ExternalSecretSpecDataFromInnerExtract
from .io_external_secrets_v1beta1_external_secret_spec_data_from_inner_find import IoExternalSecretsV1beta1ExternalSecretSpecDataFromInnerFind
from .io_external_secrets_v1beta1_external_secret_spec_data_from_inner_rewrite_inner import IoExternalSecretsV1beta1ExternalSecretSpecDataFromInnerRewriteInner
from .io_external_secrets_v1beta1_external_secret_spec_data_from_inner_source_ref import IoExternalSecretsV1beta1ExternalSecretSpecDataFromInnerSourceRef
from typing import Optional, Set
from typing_extensions import Self

class IoExternalSecretsV1beta1ExternalSecretSpecDataFromInner(BaseModel):
    """
    IoExternalSecretsV1beta1ExternalSecretSpecDataFromInner
    """ # noqa: E501
    extract: Optional[IoExternalSecretsV1beta1ExternalSecretSpecDataFromInnerExtract] = None
    find: Optional[IoExternalSecretsV1beta1ExternalSecretSpecDataFromInnerFind] = None
    rewrite: Optional[List[IoExternalSecretsV1beta1ExternalSecretSpecDataFromInnerRewriteInner]] = Field(default=None, description="Used to rewrite secret Keys after getting them from the secret Provider Multiple Rewrite operations can be provided. They are applied in a layered order (first to last)")
    source_ref: Optional[IoExternalSecretsV1beta1ExternalSecretSpecDataFromInnerSourceRef] = Field(default=None, alias="sourceRef")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["extract", "find", "rewrite", "sourceRef"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoExternalSecretsV1beta1ExternalSecretSpecDataFromInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of extract
        if self.extract:
            _dict['extract'] = self.extract.to_dict()
        # override the default output from pydantic by calling `to_dict()` of find
        if self.find:
            _dict['find'] = self.find.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rewrite (list)
        _items = []
        if self.rewrite:
            for _item in self.rewrite:
                if _item:
                    _items.append(_item.to_dict())
            _dict['rewrite'] = _items
        # override the default output from pydantic by calling `to_dict()` of source_ref
        if self.source_ref:
            _dict['sourceRef'] = self.source_ref.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoExternalSecretsV1beta1ExternalSecretSpecDataFromInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "extract": IoExternalSecretsV1beta1ExternalSecretSpecDataFromInnerExtract.from_dict(obj["extract"]) if obj.get("extract") is not None else None,
            "find": IoExternalSecretsV1beta1ExternalSecretSpecDataFromInnerFind.from_dict(obj["find"]) if obj.get("find") is not None else None,
            "rewrite": [IoExternalSecretsV1beta1ExternalSecretSpecDataFromInnerRewriteInner.from_dict(_item) for _item in obj["rewrite"]] if obj.get("rewrite") is not None else None,
            "sourceRef": IoExternalSecretsV1beta1ExternalSecretSpecDataFromInnerSourceRef.from_dict(obj["sourceRef"]) if obj.get("sourceRef") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


