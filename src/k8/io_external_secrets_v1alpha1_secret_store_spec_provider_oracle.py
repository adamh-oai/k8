# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1.29.7
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from .io_external_secrets_generators_v1alpha1_acr_access_token_spec_auth_workload_identity_service_account_ref import IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef
from .io_external_secrets_v1alpha1_secret_store_spec_provider_oracle_auth import IoExternalSecretsV1alpha1SecretStoreSpecProviderOracleAuth
from typing import Optional, Set
from typing_extensions import Self

class IoExternalSecretsV1alpha1SecretStoreSpecProviderOracle(BaseModel):
    """
    Oracle configures this store to sync secrets using Oracle Vault provider
    """ # noqa: E501
    auth: Optional[IoExternalSecretsV1alpha1SecretStoreSpecProviderOracleAuth] = None
    compartment: Optional[StrictStr] = Field(default=None, description="Compartment is the vault compartment OCID. Required for PushSecret")
    encryption_key: Optional[StrictStr] = Field(default=None, description="EncryptionKey is the OCID of the encryption key within the vault. Required for PushSecret", alias="encryptionKey")
    principal_type: Optional[StrictStr] = Field(default=None, description="The type of principal to use for authentication. If left blank, the Auth struct will determine the principal type. This optional field must be specified if using workload identity.", alias="principalType")
    region: StrictStr = Field(description="Region is the region where vault is located.")
    service_account_ref: Optional[IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef] = Field(default=None, alias="serviceAccountRef")
    vault: StrictStr = Field(description="Vault is the vault's OCID of the specific vault where secret is located.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["auth", "compartment", "encryptionKey", "principalType", "region", "serviceAccountRef", "vault"]

    @field_validator('principal_type')
    def principal_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['', 'UserPrincipal', 'InstancePrincipal', 'Workload']):
            raise ValueError("must be one of enum values ('', 'UserPrincipal', 'InstancePrincipal', 'Workload')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoExternalSecretsV1alpha1SecretStoreSpecProviderOracle from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of auth
        if self.auth:
            _dict['auth'] = self.auth.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_account_ref
        if self.service_account_ref:
            _dict['serviceAccountRef'] = self.service_account_ref.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoExternalSecretsV1alpha1SecretStoreSpecProviderOracle from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auth": IoExternalSecretsV1alpha1SecretStoreSpecProviderOracleAuth.from_dict(obj["auth"]) if obj.get("auth") is not None else None,
            "compartment": obj.get("compartment"),
            "encryptionKey": obj.get("encryptionKey"),
            "principalType": obj.get("principalType"),
            "region": obj.get("region"),
            "serviceAccountRef": IoExternalSecretsGeneratorsV1alpha1ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef.from_dict(obj["serviceAccountRef"]) if obj.get("serviceAccountRef") is not None else None,
            "vault": obj.get("vault")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


